[{"C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_webapp\\src\\index.js":"1","C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_webapp\\src\\App.js":"2","C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_webapp\\src\\reportWebVitals.js":"3","C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_webapp\\src\\Search.js":"4","C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_webapp\\src\\AutoComplete.js":"5","C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_Webapp\\src\\index.js":"6","C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_Webapp\\src\\App.js":"7","C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_Webapp\\src\\reportWebVitals.js":"8","C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_Webapp\\src\\AutoComplete.js":"9"},{"size":507,"mtime":1608819555173,"results":"10","hashOfConfig":"11"},{"size":310,"mtime":1609009704207,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1608399052009,"results":"13","hashOfConfig":"11"},{"size":2051,"mtime":1609009701586,"results":"14","hashOfConfig":"11"},{"size":4368,"mtime":1609009679555,"results":"15","hashOfConfig":"11"},{"size":507,"mtime":1608819555173,"results":"16","hashOfConfig":"17"},{"size":310,"mtime":1609009704207,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1608399052009,"results":"19","hashOfConfig":"17"},{"size":4368,"mtime":1609009679555,"results":"20","hashOfConfig":"17"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"17y0cmu",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7pnl6k",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_webapp\\src\\index.js",[],["42","43"],"C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_webapp\\src\\App.js",[],"C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_webapp\\src\\reportWebVitals.js",[],"C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_webapp\\src\\Search.js",[],["44","45"],"C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_webapp\\src\\AutoComplete.js",["46"],"import React, {Component } from 'react'\r\nimport './styles/AutoComplete.css';\r\n\r\nclass AutoComplete extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            list:[],                   // to store the list of locations\r\n            suggestions:[],            // to store suggestions of locations\r\n            text:'',                   // to store the text typed\r\n            data:[],                   // to store the details of the battles\r\n            final_data:[]              // to store the details of the battle having typed location \r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('/list')                                       // fetch the list of all the locations to show suggestions\r\n        .then((response) => response.json())\r\n        .then(locations => {\r\n            this.setState({ list: locations });\r\n        });\r\n    }\r\n   \r\n    onTextChanged = (e) => {                                   // to handle text change\r\n        const value=e.target.value;\r\n        let suggestions=[],final_data=[]\r\n        if(value.length === 0){\r\n            this.setState(() => ({suggestions,text:value,final_data}))                       // if  nothing is typed\r\n        } else {\r\n            const regex=new RegExp(`${value}`,'i')\r\n            const suggestions = this.state.list.sort().filter(v => regex.test(v))           // match the typed text with the list of locations\r\n            this.setState(() => ({suggestions,text:value,final_data}))\r\n        }\r\n    }\r\n\r\n   renderSuggestions() {                                                                    // to render the suggestions on text change\r\n       const {suggestions} = this.state\r\n       if(suggestions.length===0){                                                          // return null if there is no suggestion\r\n           return null\r\n       }\r\n       return (                                                                            // return list of suggestions\r\n          <ul>\r\n          {suggestions.map((location) => <li onClick={() => this.suggestionSelected(location)}>{location}</li>)}  \r\n         </ul>\r\n       )\r\n   }\r\n\r\n   callAPI(){                                                            // fetch details of all the battles \r\n    fetch('/data')\r\n        .then((response) => response.json())\r\n        .then(details => {\r\n            this.setState({ data: details });\r\n        });\r\n  }\r\n\r\n  componentDidUpdate(){                                                  // call api to fetch the data\r\n    this.callAPI()\r\n  }\r\n\r\nsuggestionSelected(value) {\r\n    var temp=[]          \r\n    for (const item of this.state.data) {                               // store the details of the selected location\r\n        if (item.location === value) {\r\n          temp.push(item)\r\n        }\r\n      }\r\n    this.setState(() => ({\r\n        text:value,\r\n        suggestions:[],\r\n        final_data:temp\r\n    }))\r\n}\r\n   \r\n_renderObject(){                                                                  // render details of the selected location\r\n    return Object.entries(this.state.final_data).map(([key, value], i) => {\r\n        return (\r\n            <div key={value.id}>\r\n             <ul>\r\n                <li>name: {value.name}</li>\r\n                <li>attacker_king: {value.attacker_king}</li>\r\n                <li>defender_king: {value.defender_king}</li>\r\n                <li>attacker_outcome: {value.attacker_outcome}</li>\r\n                <li>battle_type: {value.battle_type}</li>\r\n                <li>attacker_size: {value.attacker_size}</li>\r\n                <li>defender_size: {value.defender_size}</li>\r\n                <li>attacker_commander: {value.attacker_commander}</li>\r\n                <li>defender_commander: {value.defender_commander}</li>\r\n                <li>region: {value.region}</li>\r\n             </ul>\r\n            </div>\r\n        )\r\n    })\r\n}\r\n\r\n    render() {\r\n        const {text} =this.state\r\n        const {details} = this.state.data\r\n\r\n        return(\r\n            <div className=\"AutoComplete\">\r\n              <input value={text} onChange={this.onTextChanged} type=\"text\" placeholder=\"enter location\"/>\r\n              <ul>\r\n               {this.renderSuggestions()}\r\n              </ul>\r\n              {this._renderObject()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default AutoComplete\r\n\r\n","C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_Webapp\\src\\index.js",[],"C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_Webapp\\src\\App.js",[],"C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_Webapp\\src\\reportWebVitals.js",[],"C:\\Users\\chi\\Documents\\battle-webapp\\client\\battle_Webapp\\src\\AutoComplete.js",["47"],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"48","replacedBy":"52"},{"ruleId":"50","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":97,"column":16,"nodeType":"56","messageId":"57","endLine":97,"endColumn":23},{"ruleId":"54","severity":1,"message":"55","line":97,"column":16,"nodeType":"56","messageId":"57","endLine":97,"endColumn":23},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],["58"],["59"],"no-unused-vars","'details' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]